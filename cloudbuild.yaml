# /home/mauro/projects/fiji/cloudbuild.yaml
# Cloud Build configuration for backend and eventually frontend.

substitutions:
  _REGION: asia-southeast1
  _PROJECT_ID: fijian # Ensure this is your actual project ID
  _BACKEND_IMAGE_REPO: fiji-backend-images # Artifact Registry repo name for backend images
  _BACKEND_SERVICE_NAME: fiji-backend-service # Cloud Run service name for backend
  _FRONTEND_IMAGE_REPO: fiji-frontend-images # Artifact Registry repo name for frontend images
  _FRONTEND_SERVICE_NAME: fiji-frontend-service # Cloud Run service name for frontend

steps:
  # --- Backend Steps ---

  # 0. Install backend dependencies and run tests
  - name: 'python:3.13-slim' # Or your preferred Python version
    id: 'Backend Tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e # Exit immediately if a command exits with a non-zero status.
        echo "---- Installing uv ----"
        pip install uv
        echo "---- Navigating to backend directory ----"
        cd backend
        echo "---- Syncing dependencies (including dev) ----"
        uv sync --dev # Installs pytest, httpx, etc.
        echo "---- Running backend tests ----"
        uv run pytest
        echo "---- Backend tests completed ----"

  # 1. Build the Docker image for the backend service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'
      - './backend' # Docker build context is the backend directory
    id: 'Build Backend Docker Image'
    waitFor: ['Backend Tests']

  # 2. Push the Docker image for the backend to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
    id: 'Push Backend Image (Commit SHA)'
    waitFor: ['Build Backend Docker Image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'
    id: 'Push Backend Image (Latest)'
    waitFor: ['Push Backend Image (Commit SHA)']

  # 3. Deploy Backend to Cloud Run (Optional - uncomment and configure)
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: gcloud
  #   args:
  #     - 'run'
  #     - 'deploy'
  #     - '${_BACKEND_SERVICE_NAME}'
  #     - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
  #     - '--region=${_REGION}'
  #     - '--platform=managed'
  #     - '--quiet'
  #     # - '--allow-unauthenticated' 
  #     - '--set-env-vars=GOOGLE_CLOUD_PROJECT=${_PROJECT_ID}' 
  #   id: 'Deploy Backend to Cloud Run'
  #   waitFor: ['Push Backend Image (Latest)']

  # --- Frontend Steps ---

  # 0. (Optional Placeholder) Frontend Tests & Linting
  # - name: 'node:20-slim' # Or your preferred Node.js version
  #   id: 'Frontend Tests and Lint'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       set -e
  #       cd frontend
  #       npm ci
  #       npm run lint
  #       npm test # Or your specific test command
  #       echo "---- Frontend tests and linting completed ----"
  #   # This step would typically not wait for backend steps, allowing parallel execution.

  # 1. Build the Docker image for the frontend service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:latest'
      - './frontend' # Docker build context is the frontend directory
    id: 'Build Frontend Docker Image'
    # waitFor: ['Frontend Tests and Lint'] # If frontend tests step is added

  # 2. Push the Docker image for the frontend to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:$COMMIT_SHA'
    id: 'Push Frontend Image (Commit SHA)'
    waitFor: ['Build Frontend Docker Image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:latest'
    id: 'Push Frontend Image (Latest)'
    waitFor: ['Push Frontend Image (Commit SHA)']

  # 3. Deploy Frontend to Cloud Run (Optional - uncomment and configure)
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: gcloud
  #   args:
  #     - 'run'
  #     - 'deploy'
  #     - '${_FRONTEND_SERVICE_NAME}'
  #     - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:$COMMIT_SHA'
  #     - '--region=${_REGION}'
  #     - '--platform=managed'
  #     - '--quiet'
  #     # - '--allow-unauthenticated' # Frontend is usually public
  #     # Set environment variables for the Cloud Run service, e.g., NEXT_PUBLIC_BACKEND_URL
  #     # The NEXT_PUBLIC_BACKEND_URL should point to your deployed backend service.
  #     # - '--update-env-vars=NEXT_PUBLIC_BACKEND_URL=https://your-backend-service-url.a.run.app'
  #   id: 'Deploy Frontend to Cloud Run'
  #   waitFor: ['Push Frontend Image (Latest)']

# Specify all images to be pushed to Artifact Registry
images:
  # Backend images
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'
  # Frontend images
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:$COMMIT_SHA'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_FRONTEND_IMAGE_REPO}/${_FRONTEND_SERVICE_NAME}:latest'

# Options for Cloud Build
options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'E2_HIGHCPU_8' # Optional: specify machine type for faster builds