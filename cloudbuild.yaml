```yaml
# /home/mauro/projects/fiji/cloudbuild.yaml
# Cloud Build configuration for backend and eventually frontend.

substitutions:
  _REGION: asia-southeast1
  _PROJECT_ID: fijian # Ensure this is your actual project ID
  _BACKEND_IMAGE_REPO: fiji-backend-images # Artifact Registry repo name for backend images
  _BACKEND_SERVICE_NAME: fiji-backend-service # Cloud Run service name for backend

steps:
  # --- Backend Steps ---

  # 0. Install backend dependencies and run tests
  # This step uses a Python image, installs uv, syncs dependencies (including dev for tests),
  # and runs pytest. If tests fail, the build stops here.
  - name: 'python:3.13-slim' # Or your preferred Python version
    id: 'Backend Tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e # Exit immediately if a command exits with a non-zero status.
        echo "---- Installing uv ----"
        pip install uv
        echo "---- Navigating to backend directory ----"
        cd backend
        echo "---- Syncing dependencies (including dev) ----"
        uv sync --dev # Installs pytest, httpx, etc.
        echo "---- Running backend tests ----"
        uv run pytest
        echo "---- Backend tests completed ----"
    # This step implicitly uses the source code checked out by Cloud Build.

  # 1. Build the Docker image for the backend service
  # This step runs only if 'Backend Tests' step succeeds.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'
      - './backend' # Docker build context is the backend directory
    id: 'Build Backend Docker Image'
    waitFor: ['Backend Tests'] # Explicitly wait for tests to pass

  # 2. Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
    id: 'Push Backend Image (Commit SHA)'
    waitFor: ['Build Backend Docker Image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'
    id: 'Push Backend Image (Latest)'
    waitFor: ['Push Backend Image (Commit SHA)'] # Wait for the SHA-tagged push

  # 3. Deploy to Cloud Run (Optional - uncomment and configure if you want CD)
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: gcloud
  #   args:
  #     - 'run'
  #     - 'deploy'
  #     - '${_BACKEND_SERVICE_NAME}'
  #     - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
  #     - '--region=${_REGION}'
  #     - '--platform=managed'
  #     - '--quiet'
  #     # Add --allow-unauthenticated or configure IAM for authentication
  #     # - '--allow-unauthenticated' 
  #     # Set environment variables for the Cloud Run service
  #     - '--set-env-vars=GOOGLE_CLOUD_PROJECT=${_PROJECT_ID}' 
  #     # Add other necessary environment variables:
  #     # - '--update-env-vars=KEY1=VALUE1,KEY2=VALUE2'
  #   id: 'Deploy Backend to Cloud Run'
  #   waitFor: ['Push Backend Image (Latest)']


# Specify the images to be pushed to Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:$COMMIT_SHA'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_BACKEND_IMAGE_REPO}/${_BACKEND_SERVICE_NAME}:latest'

# Options for Cloud Build
options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'E2_HIGHCPU_8' # Optional: specify machine type for faster builds
```
**Key changes:**
-   Added a new step `Backend Tests` before the Docker build.
    -   It uses a `python:3.13-slim` image.
    -   Installs `uv`.
    -   Navigates into the `backend` directory.
    -   Runs `uv sync --dev` to install all dependencies, including those for testing.
    -   Runs `uv run pytest` to execute the tests.
    -   `set -e` ensures the script exits on any error, failing the build step if tests fail.
-   The Docker build step (`Build Backend Docker Image`) now has `waitFor: ['Backend Tests']` to ensure it only runs if tests pass.
-   Updated `_BACKEND_SERVICE_NAME` substitution for clarity (e.g., `fiji-backend-service`).
-   Added a commented-out example for deploying to Cloud Run, which you can enable and configure later.

This updated `cloudbuild.yaml` now incorporates a testing phase for the backend.
The Dockerfile changes and these Cloud Build changes should work together to ensure a tested and correctly packaged backend application.

Would you like to commit these changes now, or are there any other files to review/update?